@page "/"
@inject NavigationManager NavigationManager
@inject WardrobeItemService WardrobeItemService

<PageTitle>Wardrobe Inventory</PageTitle>

@if (_wardrobeItems is null)
{
    <LoadingSpinner />
}
else
{
    <div class="container">
        <div class="row row-cols-lg-auto justify-content-between align-items-center">
            <div class="flex-fill col-lg">
                <div class="form-floating mb-3">
                    <input id="searchName" class="form-control" type="text" placeholder="Search by Name" @oninput="FilterWardrobeItemsByName" />
                    <label for="searchName">Search by Name</label>
                </div>
            </div>
            <div class="flex-fill col-lg">
                <div class="form-floating mb-3">
                    <select id="searchColour" class="form-select" type="text" placeholder="Search by Colour" aria-label="Search colour select" @onchange="FilterWardrobeItemsByColour">
                        <option value="" selected>Select Colour</option>
                        @foreach (WardrobeItemColours colour in Enum.GetValues(typeof(WardrobeItemColours)))
                        {
                            <option value="@colour">@colour.GetDisplayName()</option>
                        }
                    </select>
                    <label class="form-" for="searchColour">Search by Colour</label>
                </div>
            </div>
            <div class="flex-fill col-lg">
                <div class="form-floating mb-3">
                    <select id="searchMaterial" class="form-select" type="text" placeholder="Search by Material" aria-label="Search material select" @onchange="FilterWardrobeItemsByMaterial">
                        <option value="" selected>Select Material</option>
                        @foreach (WardrobeItemMaterials material in Enum.GetValues(typeof(WardrobeItemMaterials)))
                        {
                            <option value="@material">@material.GetDisplayName()</option>
                        }
                    </select>
                    <label for="searchMaterial">Search by Material</label>
                </div>
            </div>
            <div class="flex-fill col-lg">
                <div class="form-floating mb-3">
                    <select id="searchSize" class="form-select" type="text" placeholder="Search by Size" aria-label="Search size select" @onchange="FilterWardrobeItemsBySize">
                        <option value="" selected>Select Size</option>
                        @foreach (WardrobeItemSizes size in Enum.GetValues(typeof(WardrobeItemSizes)))
                        {
                            <option value="@size">@size.GetDisplayName()</option>
                        }
                    </select>
                    <label for="searchSize">Search by Size</label>
                </div>
            </div>
        </div>
        <div class="table-responsive-sm">
            <table class="table table-hover table-dark align-middle">
                <thead>
                    <tr>
                        <th scope="col" colspan="2">
                            Item
                        </th>
                        <th scope="col" colspan="3">
                            Description
                        </th>
                        <th class="col-1" scope="col">
                            <div class="">
                                <AddButton OnClickCallback="@(() => NavigateToAddWardrobeItem())" />
                            </div>
                        </th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in FilteredWardrobeItems)
                    {
                        <tr>
                            <td class="col-1">
                                <img class="rounded img-thumbnail" src="@(item.ImagePath)" alt="Item Image" />
                            </td>
                            <td>
                                @item.Name
                            </td>
                            <td>
                                @item.Colour?.GetDisplayName()
                            </td>
                            <td>
                                @item.Size?.GetDisplayName()
                            </td>
                            <td>
                                @item.Material?.GetDisplayName()
                            </td>
                            <td>
                                <div class="d-flex justify-content-between gap-1">
                                    <EditButton OnClickCallback="@(() => NavigateToEditWardrobeItem(item.Id))" />
                                    <DeleteButton OnClickCallback="@(() => NavigateToDeleteWardrobeItem(item.Id))" />
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
            <nav aria-label="Select page">
                <ul class="pagination justify-content-end">
                    <li class="page-item @(pageIndex == 0 ? "disabled" : "")">
                        <a class="page-link">First</a>
                    </li>
                    <li class="page-item @(pageIndex == 0 ? "disabled" : "")">
                        <a class="page-link">Previous</a>
                    </li>
                    @for (int i = pageIndex - 3; i < pageIndex + 3; i++)
                    {
                        if (i >= 0 && i < totalPages)
                        {
                            <li class="page-item @(pageIndex == i ? "disabled" : "")">
                                <a class="page-link">@(i + 1)</a>
                            </li>
                        }
                    }
                    <li class="page-item  @(pageIndex == totalPages - 1 ? "disabled" : "")">
                        <a class="page-link" href="#">Next</a>
                    </li>
                    <li class="page-item  @(pageIndex == totalPages - 1 ? "disabled" : "")">
                        <a class="page-link" href="#">Last</a>
                    </li>
                </ul>
            </nav>
        </div>
    </div>
}

@code {
    private IReadOnlyList<WardrobeItemDto>? _wardrobeItems;
    private IReadOnlyList<WardrobeItemDto> FilteredWardrobeItems { get; set; } = [];

    private string _searchName = string.Empty;
    private WardrobeItemColours? _searchColour = null;
    private WardrobeItemMaterials? _searchMaterial = null;
    private WardrobeItemSizes? _searchSize = null;

    private int pageIndex = 0;
    private int pageSize = 5;
    private int totalRecords = 0;
    private int totalPages => ((totalRecords - 1) / pageSize) + 1;

    protected override async Task OnInitializedAsync()
    {
        var response = await WardrobeItemService.GetWardrobeItems();
        _wardrobeItems = response.WardrobeItems ?? [];
        FilterWardrobeItems();
    }

    private void FilterWardrobeItemsByName(ChangeEventArgs e)
    {
        _searchName = e.Value?.ToString()?.ToLower() ?? "";
        FilterWardrobeItems();
    }

    private void FilterWardrobeItemsByColour(ChangeEventArgs e)
    {
        _searchColour = string.IsNullOrWhiteSpace(e.Value?.ToString()) ? null : Enum.Parse<WardrobeItemColours>(e.Value.ToString()!);
        FilterWardrobeItems();
    }

    private void FilterWardrobeItemsByMaterial (ChangeEventArgs e)
    {
        _searchMaterial = string.IsNullOrWhiteSpace(e.Value?.ToString()) ? null : Enum.Parse<WardrobeItemMaterials>(e.Value.ToString()!);
        FilterWardrobeItems();
    }

    private void FilterWardrobeItemsBySize(ChangeEventArgs e)
    {
        _searchSize = string.IsNullOrWhiteSpace(e.Value?.ToString()) ? null : Enum.Parse<WardrobeItemSizes>(e.Value.ToString()!);
        FilterWardrobeItems();
    }

    private void FilterWardrobeItems()
    {
        if (_wardrobeItems != null)
        {
            var query = _wardrobeItems.AsQueryable();
            query = query.Where(x => x.Name.ToLower().IndexOf(_searchName) >= 0);

            if (_searchColour != null)
            {
                query = query.Where(x => x.Colour == _searchColour);
            }

            if (_searchMaterial != null)
            {
                query = query.Where(x => x.Material == _searchMaterial);
            }

            if (_searchSize != null)
            {
                query = query.Where(x => x.Size == _searchSize);
            }

            totalRecords = query.Count();
            FilteredWardrobeItems = query.Skip(pageIndex * pageSize).Take(pageSize).ToList();
            Console.WriteLine($"pageIndex={pageIndex}");
            Console.WriteLine($"pageSize={pageSize}");
            Console.WriteLine($"totalRecords={totalRecords}");
            Console.WriteLine($"totalPages={totalPages}");

        }
    }

    private void NavigateToAddWardrobeItem()
    {
        NavigationManager.NavigateTo($"/add");
    }

    private void NavigateToDeleteWardrobeItem(Guid id)
    {
        NavigationManager.NavigateTo($"/delete/{id}");
    }

    private void NavigateToEditWardrobeItem(Guid id)
    {
        NavigationManager.NavigateTo($"/edit/{id}");
    }
}
