@page "/edit/{Id:guid}"
@inject ImageFileService ImageFileService
@inject NavigationManager NavigationManager
@inject WardrobeItemService WardrobeItemService

<PageTitle>Wardrobe Inventory - Edit</PageTitle>

<div class="container">

    <h1 class="h3 mb-3">Edit Wardrobe Item</h1>

    <EditForm Model="@request" method="post" OnValidSubmit="AddWardrobeItemAsync" FormName="AddWardrobeItem" class="form-group">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-floating mb-3">
            <InputText @bind-Value="request.Name" id="requestName" class="form-control text-start" placeholder="Name" />
            <label for="requestName">Name</label>
            <ValidationMessage For="() => request.Name" />
        </div>

        <div class="mb-3">
            <InputFile OnChange="LoadFile" accept=".png,.jpg,.jpeg" id="requestFile" class="form-control" placeholder="Image" />
            <label for="requestFile" class="visually-hidden">Image</label>
            @if (!string.IsNullOrWhiteSpace(fileErrorMessage))
            {
                <span>@fileErrorMessage</span>
            }
        </div>

        <div class="form-floating mb-3">
            <InputSelect @bind-Value="request.Colour" id="requestColour" class="form-select" aria-label="Colour select">
                <option value="" selected>Select a Colour</option>
                @foreach (WardrobeItemColours colour in Enum.GetValues(typeof(WardrobeItemColours)))
                {
                    <option value="@colour">@colour.GetDisplayName()</option>
                }
            </InputSelect>
            <label for="requestColour">Colour</label>
        </div>

        <div class="form-floating mb-3">
            <InputSelect @bind-Value="request.Material" id="requestMaterial" class="form-select" aria-label="Material select">
                <option value="" selected>Select a Material</option>
                @foreach (WardrobeItemMaterials material in Enum.GetValues(typeof(WardrobeItemMaterials)))
                {
                    <option value="@material">@material.GetDisplayName()</option>
                }
            </InputSelect>
            <label for="requestMaterial">Material</label>
        </div>

        <div class="form-floating mb-3">
            <InputSelect @bind-Value="request.Size" id="requestSize" class="form-select" aria-label="Size select">
                <option value="" selected>Select a Size</option>
                @foreach (WardrobeItemSizes size in Enum.GetValues(typeof(WardrobeItemSizes)))
                {
                    <option value="@size">@size.GetDisplayName()</option>
                }
            </InputSelect>
            <label for="requestSize">Size</label>
        </div>

        <div class="d-flex justify-content-end gap-3">
            <button class="btn btn-primary btn-sm" type="submit">Update</button>
            <button class="btn btn-secondary btn-sm" type="button">Cancel</button>
        </div>

    </EditForm>

</div>

@code {
    private WardrobeItemCreateDto request = new();
    private IBrowserFile? file = null;
    private string fileErrorMessage = "";

    private async Task AddWardrobeItemAsync()
    {
        if (file is not null)
        {
            var imageFileResponse = await ImageFileService.PostImageFile(file);
            if (imageFileResponse.IsSuccess)
            {
                request.ImagePath = imageFileResponse.ImagePath;
            }
        }

        var response = await WardrobeItemService.PostWardrobeItem(request);

        Console.WriteLine($"{nameof(AddWardrobeItemAsync)} - {response.IsSuccess}");
        if (response.IsSuccess)
        {
            Console.WriteLine($"{response.WardrobeItem?.Id} - {response.WardrobeItem?.Name}");
        }
        else
        {
            Console.WriteLine(response.Message);
        }

        NavigationManager.NavigateTo("/wardrobeitems");
    }

    private void LoadFile(InputFileChangeEventArgs e)
    {
        var inputFile = e.File;
        fileErrorMessage = "";

        var allowedFileTypes = new List<string> { ".png", ".jpg", ".jpeg" };
        var maximumFileSize = 5 * 1024 * 1024;

        Console.WriteLine($"Name = {inputFile.Name}");
        Console.WriteLine($"Size = {inputFile.Size}");
        Console.WriteLine($"ContentType = {inputFile.ContentType}");

        if (!allowedFileTypes.Contains(Path.GetExtension(inputFile.Name)))
        {
            fileErrorMessage = "File not a valid type (PNG, JPG, JPEG)! It will not be uploaded.";
            file = null;
        }

        if (inputFile.Size > maximumFileSize)
        {
            fileErrorMessage = "File exceeds maximum (5 MB)! It will not be uploaded.";
            file = null;
        }
                
        file = e.File;
    }
}
