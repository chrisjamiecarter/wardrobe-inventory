@page "/delete/{Id:guid}"
@inject ImageFileService ImageFileService
@inject NavigationManager NavigationManager
@inject WardrobeItemService WardrobeItemService

<PageTitle>Wardrobe Inventory - Delete</PageTitle>

<div class="container">

    <h1 class="h3 mb-3">Delete Wardrobe Item</h1>

    @if (isLoading)
    {
        <LoadingSpinner />
    }
    else if (request is null)
    {
        <span>No wardrobe item found for id '@(Id)'</span>
    }
    else
    {
        <EditForm Model="@request" method="post" OnValidSubmit="DeleteWardrobeItemAsync" FormName="DeleteWardrobeItem" class="form-group">

            <div class="form-floating mb-3">
                <InputText @bind-Value="request.Name" id="requestName" class="form-control" placeholder="Name" readonly />
                <label for="requestName">Name</label>
            </div>

            <div class="form-floating mb-3">
                <input type="text" value="@(request.Colour)" id="requestColour" class="form-control" placeholder="Colour" readonly />
                <label for="requestColour">Colour</label>
            </div>

            <div class="form-floating mb-3">
                <input type="text" value="@(request.Material)" id="requestMaterial" class="form-control" placeholder="Material" readonly />
                <label for="requestMaterial">Material</label>
            </div>

            <div class="form-floating mb-3">
                <input type="text" value="@(request.Size)" id="requestSize" class="form-control" placeholder="Size" readonly />
                <label for="requestSize">Size</label>
            </div>

            <div class="d-flex justify-content-end gap-3">
                <button class="btn btn-danger btn-sm" type="submit">Delete</button>
                <button class="btn btn-secondary btn-sm" type="button">Cancel</button>
            </div>

        </EditForm>
    }

</div>

@code {
    [Parameter] public Guid Id { get; set; }

    private bool isLoading = true;
    private WardrobeItemDto? request;

    protected override async Task OnInitializedAsync()
    {
        isLoading = true;

        var response = await WardrobeItemService.GetWardrobeItem(Id);
        Console.WriteLine($"{nameof(OnInitializedAsync)} - {response.IsSuccess}");
        if (response.IsSuccess)
        {
            request = response.WardrobeItem;
        }
        else
        {
            Console.WriteLine(response.Message);
        }

        isLoading = false;
    }

    private async Task DeleteWardrobeItemAsync()
    {
        if (request is null)
        {
            return;
        }

        var response = await WardrobeItemService.DeleteWardrobeItem(request.Id);
        Console.WriteLine($"{nameof(DeleteWardrobeItemAsync)} - {response.IsSuccess}");
        if (!response.IsSuccess)
        {
            Console.WriteLine(response.Message);
        }

        NavigationManager.NavigateTo("/");
    }
}
